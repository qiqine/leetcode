题目：You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

解:

var addTwoNumbers = function(l1, l2) {
    let l3=new ListNode(0);
    let pre=0;
    let curr=l3
    while(l1||l2){
        let x = l1?l1.val:0
        let y= l2?l2.val:0
        let sum =x+y+pre
        let val=sum%10;
        pre=parseInt(sum/10);
        curr.next=new ListNode(val)
        curr=curr.next;
        console.log(val,pre)
        l1&&(l1=l1.next);
        l2&&(l2=l2.next);
    }
    ;
        
    if(pre>0){
       curr.next = new ListNode(pre)
    }

    return l3.next
};

坑多
