题目：
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

解法：



/**
 * @param {string} digits
 * @return {string[]}
 */
var res
var temp
let numberMap={
        '2':['a','b','c'],
        '3':['d','e','f'],
        '4':['g','h','i'],
        '5':['j','k','l'],
        '6':['m','n','o'],
        '7':['p','q','r','s'],
        '8':['t','u','v'],
        '9':['w','x','y','z']
    }
var letterCombinations = function(digits) {
    res=[],temp=[]
    if(digits.length !== 0){
      getRes(digits,0)  
    }
    return res
};
var getRes = function(digits,index){
    if(index>=digits.length){
        res.push(temp.join(''))
        return
    }
    let arr=digits.split('')
    let number=numberMap[arr[index]]
    for(let j=0;j<number.length;j++){
        temp.push(number[j])
        getRes(digits,index+1)
        temp.pop(number[j])
    }
}
